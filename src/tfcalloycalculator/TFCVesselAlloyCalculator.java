package tfcalloycalculator;

import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

public class TFCVesselAlloyCalculator extends javax.swing.JFrame {
	public static enum BaseOreType {
		COPPER("Native Copper"),
		CASSITERITE("Cassiterite"),
		BISMUTHINITE("Bismuthinite"),
		SPHALERITE("Sphalerite"),
		GOLD("Native Gold"),
		SILVER("Native Silver");
		
		public final String presentableName;
		
		BaseOreType(String presentableName) {
			this.presentableName = presentableName;
		}
	}
	
	public static class AlloyTypeEntry {
		public final BaseOreType baseType;
		public final double requiredPercentMin;
		public final double requiredPercentMax;
		
		public AlloyTypeEntry(BaseOreType baseType, double requiredPercentMin, double requiredPercentMax) {
			this.baseType = baseType;
			this.requiredPercentMin = requiredPercentMin;
			this.requiredPercentMax = requiredPercentMax;
		}
	}
	
	public static enum AlloyType {
		COPPER("Copper", new AlloyTypeEntry(BaseOreType.COPPER, 100, 100)),
		TIN("Tin", new AlloyTypeEntry(BaseOreType.CASSITERITE, 100, 100)),
		BISMUTH("Bismuth", new AlloyTypeEntry(BaseOreType.BISMUTHINITE, 100, 100)),
		ZINC("Zinc", new AlloyTypeEntry(BaseOreType.SPHALERITE, 100, 100)),
		GOLD("Gold", new AlloyTypeEntry(BaseOreType.GOLD, 100, 100)),
		SILVER("Silver", new AlloyTypeEntry(BaseOreType.SILVER, 100, 100)),
		BISMUTH_BRONZE("Bismuth Bronze", new AlloyTypeEntry[] {
			new AlloyTypeEntry(BaseOreType.SPHALERITE, 20, 30),
			new AlloyTypeEntry(BaseOreType.COPPER, 50, 65),
			new AlloyTypeEntry(BaseOreType.BISMUTHINITE, 10, 20)
		}),
		BLACK_BRONZE("Black Bronze", new AlloyTypeEntry[] {
			new AlloyTypeEntry(BaseOreType.COPPER, 50, 70),
			new AlloyTypeEntry(BaseOreType.SILVER, 10, 25),
			new AlloyTypeEntry(BaseOreType.GOLD, 10, 25)
		}),
		BRONZE("Bronze", new AlloyTypeEntry[] {
			new AlloyTypeEntry(BaseOreType.COPPER, 88, 92),
			new AlloyTypeEntry(BaseOreType.CASSITERITE, 8, 12)
		}),
		BRASS("Brass", new AlloyTypeEntry[] {
			new AlloyTypeEntry(BaseOreType.COPPER, 88, 92),
			new AlloyTypeEntry(BaseOreType.SPHALERITE, 8, 12)
		}),
		ROSE_GOLD("Rose Gold", new AlloyTypeEntry[] {
			new AlloyTypeEntry(BaseOreType.COPPER, 15, 30),
			new AlloyTypeEntry(BaseOreType.GOLD, 70, 85)
		}),
		STERLING_SILVER("Sterling Silver", new AlloyTypeEntry[] {
			new AlloyTypeEntry(BaseOreType.COPPER, 20, 40),
			new AlloyTypeEntry(BaseOreType.SILVER, 60, 80)
		});
		
		public final String outputName;
		public final AlloyTypeEntry[] entries;
		
		AlloyType(String outputName, AlloyTypeEntry entry) {
			this.outputName = outputName;
			this.entries = new AlloyTypeEntry[] {entry};
		}
		
		AlloyType(String outputName, AlloyTypeEntry[] entries) {
			this.outputName = outputName;
			this.entries = entries;
		}
	}
	
	public TFCVesselAlloyCalculator() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        oreSelectionTable = new javax.swing.JTable() {
            @Override
            public Class getColumnClass(int column) {
                return getValueAt(0, column).getClass();
            }
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int col) {
                Component comp = super.prepareRenderer(renderer, row, col);
                OreEntry value = (OreEntry)getModel().getValueAt(row, col);
                comp.setBackground(value.getBackgroundColor());
                return comp;
            }
            public String getToolTipText(MouseEvent e) {
                String tip = null;
                java.awt.Point p = e.getPoint();
                int rowIndex = rowAtPoint(p);
                int colIndex = columnAtPoint(p);
                if(getValueAt(rowIndex, colIndex) != null && getValueAt(rowIndex, colIndex) instanceof OreEntry) {
                    tip = ((OreEntry)getValueAt(rowIndex, colIndex)).getTooltip();
                }

                return tip;
            }
        };
        vesselSpacingPanel = new javax.swing.JPanel();
        vesselLabel1 = new javax.swing.JLabel();
        vesselLabel2 = new javax.swing.JLabel();
        vesselLabel4 = new javax.swing.JLabel();
        vesselLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultLabel = new javax.swing.JLabel();
        settingsButton = new javax.swing.JButton();
        descriptionLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TFC Vessel Alloy Calculator");
        setMinimumSize(new java.awt.Dimension(725, 300));

        oreSelectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Small (" + OreEntry.Type.SMALL.amount + " units)",
                "Poor (" + OreEntry.Type.POOR.amount + " units)",
                "Regular (" + OreEntry.Type.REGULAR.amount + " units)",
                "Rich (" + OreEntry.Type.RICH.amount + " units)"
            }
        ) {
            @Override
            public boolean isCellEditable(int i, int i1) {
                return false;
            }
        });
        oreSelectionTable.setRowHeight(32);
        oreSelectionTable.setRowSelectionAllowed(false);
        oreSelectionTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        oreSelectionTable.setTableHeader(null);
        jScrollPane1.setViewportView(oreSelectionTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        vesselLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vesselLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        vesselLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        vesselLabel1.setPreferredSize(new java.awt.Dimension(64, 64));
        vesselLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                vesselLabel1MouseReleased(evt);
            }
        });

        vesselLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vesselLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        vesselLabel2.setPreferredSize(new java.awt.Dimension(64, 64));
        vesselLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                vesselLabel2MouseReleased(evt);
            }
        });

        vesselLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vesselLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        vesselLabel4.setPreferredSize(new java.awt.Dimension(64, 64));
        vesselLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                vesselLabel4MouseReleased(evt);
            }
        });

        vesselLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vesselLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        vesselLabel3.setPreferredSize(new java.awt.Dimension(64, 64));
        vesselLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                vesselLabel3MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout vesselSpacingPanelLayout = new javax.swing.GroupLayout(vesselSpacingPanel);
        vesselSpacingPanel.setLayout(vesselSpacingPanelLayout);
        vesselSpacingPanelLayout.setHorizontalGroup(
            vesselSpacingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vesselSpacingPanelLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(vesselSpacingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vesselLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vesselLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vesselSpacingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vesselLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vesselLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        vesselSpacingPanelLayout.setVerticalGroup(
            vesselSpacingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vesselSpacingPanelLayout.createSequentialGroup()
                .addGroup(vesselSpacingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vesselLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vesselLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vesselSpacingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vesselLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vesselLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        resultLabel.setText("Please select some ores.");
        resultLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane2.setViewportView(resultLabel);

        settingsButton.setText("Settings");
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });

        descriptionLabel.setText("<html>\nLeft click / scroll up to add a entry to the vessel, right click / scroll down to remove.<br />\nShift+click to quickly add/remove stacks at a time.\n</html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(vesselSpacingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(settingsButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(vesselSpacingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(settingsButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vesselLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vesselLabel1MouseReleased
        VesselContainer.completelyClear(0);
    }//GEN-LAST:event_vesselLabel1MouseReleased

    private void vesselLabel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vesselLabel2MouseReleased
        VesselContainer.completelyClear(1);
    }//GEN-LAST:event_vesselLabel2MouseReleased

    private void vesselLabel3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vesselLabel3MouseReleased
        VesselContainer.completelyClear(2);
    }//GEN-LAST:event_vesselLabel3MouseReleased

    private void vesselLabel4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vesselLabel4MouseReleased
        VesselContainer.completelyClear(3);
    }//GEN-LAST:event_vesselLabel4MouseReleased

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_settingsButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch(ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(TFCVesselAlloyCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				
				//TODO: Config and show how much each type is worth unit-wise.
				TFCVesselAlloyCalculator jfcAlloyCalculator = new TFCVesselAlloyCalculator();
				try {
					VesselContainer.guiComponents[0] = jfcAlloyCalculator.vesselLabel1;
					VesselContainer.guiComponents[1] = jfcAlloyCalculator.vesselLabel2;
					VesselContainer.guiComponents[2] = jfcAlloyCalculator.vesselLabel3;
					VesselContainer.guiComponents[3] = jfcAlloyCalculator.vesselLabel4;
					
					DefaultTableModel tableModel = (DefaultTableModel) oreSelectionTable.getModel();
					for(BaseOreType baseType : BaseOreType.values()) {
						tableModel.addRow(new Object[] {new OreEntry(baseType, OreEntry.Type.SMALL), new OreEntry(baseType, OreEntry.Type.POOR), new OreEntry(baseType, OreEntry.Type.REGULAR), new OreEntry(baseType, OreEntry.Type.RICH)});
					}
					oreSelectionTable.addMouseListener(new MouseAdapter() {
						int pressClickedRow = -1;
						int pressClickedColumn = -1;
						int mouseClickType = -1;
						@Override
						public void mousePressed(MouseEvent e) {
							Point contextMenuOpenedAt = e.getPoint();
							pressClickedRow = oreSelectionTable.rowAtPoint(contextMenuOpenedAt);
							pressClickedColumn = oreSelectionTable.columnAtPoint(contextMenuOpenedAt);
							mouseClickType = e.getButton();
						}

						@Override
						public void mouseReleased(MouseEvent e) {
							Point contextMenuOpenedAt = e.getPoint();
							int clickedRow = oreSelectionTable.rowAtPoint(contextMenuOpenedAt);
							int clickedColumn = oreSelectionTable.columnAtPoint(contextMenuOpenedAt);
							if(clickedRow == pressClickedRow && clickedColumn == pressClickedColumn && mouseClickType == e.getButton()) {
								switch(mouseClickType) {
									case MouseEvent.BUTTON1:
										if(oreSelectionTable.getValueAt(clickedRow, clickedColumn) instanceof OreEntry) {
											OreEntry selection = (OreEntry)oreSelectionTable.getValueAt(clickedRow, clickedColumn);
											if(VesselContainer.add(selection)) {
												selection.color = Color.WHITE;
												tableModel.fireTableCellUpdated(clickedRow, clickedColumn);
											}
											updateResultingString();
										}
										break;
									case MouseEvent.BUTTON3:
										if(oreSelectionTable.getValueAt(clickedRow, clickedColumn) instanceof OreEntry) {
											oreSelectionTable.changeSelection(clickedRow, clickedColumn, false, false);
											OreEntry selection = (OreEntry)oreSelectionTable.getValueAt(clickedRow, clickedColumn);
											if(VesselContainer.remove(selection)) {
												selection.color = Color.GRAY;
												tableModel.fireTableCellUpdated(clickedRow, clickedColumn);
											}
											updateResultingString();
										}
										break;
								}
							}
						}
					});
					oreSelectionTable.addMouseWheelListener(new MouseWheelListener() {
						@Override
						public void mouseWheelMoved(MouseWheelEvent e) {
							Point contextMenuOpenedAt = e.getPoint();
							int clickedRow = oreSelectionTable.rowAtPoint(contextMenuOpenedAt);
							int clickedColumn = oreSelectionTable.columnAtPoint(contextMenuOpenedAt);
							int rotation = e.getWheelRotation();
							if(oreSelectionTable.getValueAt(clickedRow, clickedColumn) instanceof OreEntry) {
								OreEntry selection = (OreEntry)oreSelectionTable.getValueAt(clickedRow, clickedColumn);
								if(rotation < 0) {
									if(VesselContainer.add(selection)) {
										selection.color = Color.WHITE;
										tableModel.fireTableCellUpdated(clickedRow, clickedColumn);
									}
								} else if(rotation > 0) {
									if(VesselContainer.remove(selection)) {
										selection.color = Color.GRAY;
										tableModel.fireTableCellUpdated(clickedRow, clickedColumn);
									}
								}
								updateResultingString();
							}
						}
					});
					resultLabel.setText(VesselContainer.getResultingString());
					jfcAlloyCalculator.setVisible(true);
				} catch(IOException | IllegalArgumentException e) {
					JOptionPane.showMessageDialog(jfcAlloyCalculator, "Could not load ore texture.", "IO Error", JOptionPane.ERROR_MESSAGE);
					System.exit(1);
				}
			}
		});
	}
	
	public static void updateResultingString() {
		resultLabel.setText(VesselContainer.getResultingString());
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel descriptionLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTable oreSelectionTable;
    public static javax.swing.JLabel resultLabel;
    private javax.swing.JButton settingsButton;
    private javax.swing.JLabel vesselLabel1;
    private javax.swing.JLabel vesselLabel2;
    private javax.swing.JLabel vesselLabel3;
    private javax.swing.JLabel vesselLabel4;
    private javax.swing.JPanel vesselSpacingPanel;
    // End of variables declaration//GEN-END:variables
}

